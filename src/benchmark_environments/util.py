"""Miscellaneous utilities."""
from functools import partial
from typing import Callable, Optional

import gym


class AutoResetWrapper(gym.Wrapper):
    """Hides done=True and auto-resets at the end of each episode."""

    def step(self, action):
        """When done=True, returns done=False instead and automatically resets.

        When an automatic reset happens, the observation from reset is returned,
        and the overridden observation is stored in
        `info["terminal_observation"]`.
        """
        obs, rew, done, info = self.env.step(action)
        if done:
            info["terminal_observation"] = obs
            obs = self.env.reset()
        return obs, rew, False, info


class EpisodeEndRewardWrapper(gym.Wrapper):
    """Replaces all rewards, with all rewards becoming zero except episode end.

    Useful for converting living rewards into equivalent episode termination
    rewards in environments like CartPole and MountainCar.
    """

    def __init__(self, env: gym.Env, episode_end_reward: float):
        """Initialize EpisodeEndRewardWrapper.

        Params:
          env: The wrapped environment.
          episode_end_reward: All rewards are zero except the episode end reward,
            which has this value.
        """
        super().__init__(env)
        self.episode_end_reward = float(episode_end_reward)

    def step(self, action):
        """Wraps `step` to replace rewards."""
        obs, _, done, info = self.env.step(action)
        if done:
            rew = self.episode_end_reward
        else:
            rew = 0.0
        return obs, rew, done, info


def make_env_no_wrappers(env_name: str, **kwargs) -> gym.Env:
    """Gym sometimes wraps envs in TimeLimit before returning from gym.make().

    This helper method builds directly from step to avoid this wrapper.
    """
    return gym.envs.registry.env_specs[env_name].make(**kwargs)


def get_gym_max_episode_steps(env_name: str) -> Optional[int]:
    """Get the `max_episode_steps` attribute associated with a gym Spec."""
    return gym.envs.registry.env_specs[env_name].max_episode_steps


def _gym_register_as_decorator(
    func: Callable[..., gym.Env],
    id_base: str,
    *,
    module_name: str,
    id_prefix: str = "",
    **register_kwargs,
) -> Callable[..., gym.Env]:
    """Decorator variant of `gym.register` with autogenerated `id` and `entry_point`.

    (Args documentation largely copied from gym.registration.EnvSpec.__init__).

    Args:
        func: Callable that returns an env. This Callable should be defined in the
            module with name `module_name`. `func.__name__` is used to automatically
            construct the `entry_point` argument to `gym.register`.
        id_base: The Gym-registered `id` is `id_prefix + id_base`.
        module_name: The name of the module where the decorator will be applied.
            Usually the user will want to use `__name__`.
        id_prefix: The Gym-registered `id` is `id_prefix + id_base`.
        reward_threshold (Optional[int]): The reward threshold before the task is
            considered solved.
        nondeterministic (bool): Whether this environment is non-deterministic even
            after seeding.
        max_episode_steps (Optional[int]): The maximum number of steps that an episode
            can consist of.
        kwargs (dict): Kwargs to pass into `func`.
    """
    entry_point = f"{module_name}:{func.__name__}"
    gym.register(id=id_prefix + id_base, entry_point=entry_point, **register_kwargs)
    return func


def curried_gym_register_as_decorator(module_name: str,) -> Callable[[str], Callable]:
    """Two-staged curry that builds a easy-to-use `gym.register` decorator.

    See `benchmark_environments.classic` for example usage.

    This function and its return value build a `functools.partial` instance of
    `_gym_register_as_decorator`.

    In the first curry stage the `module_name` argument of `_gym_register_as_decorator`
    is filled. In the second stage, the `id_base` arguments, and optionally other
    `**kwargs` are filled.

    Returns:
        The second curry function which accepts the `id_base` argument, and which
        finally returns the decorator.
    """

    def build_decorator(id_base: str, *args, **kwargs) -> Callable:
        return partial(
            _gym_register_as_decorator,
            *args,
            id_base=id_base,
            module_name=module_name,
            id_prefix="benchmark_environments/",
            **kwargs,
        )

    return build_decorator
