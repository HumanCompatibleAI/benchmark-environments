version: 2.1  # Version of CircleCI config format

orbs:  # CircleCI packages ("orbs") we depend on
  codecov: codecov/codecov@1.1.0  # support for uploading code coverage to codecov

executors:
  my-executor:
    docker:
      - image: humancompatibleai/seals:base
        # Credentials defined in `docker-hub-creds` context.
        # We authenticate to avoid Dockerhub per-IP rate limiting of anonymous users.
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: /seals
    environment:
      # If you change these, also change ci/code_checks.sh
      SRC_FILES: src/ tests/ setup.py
      TYPECHECK_FILES: src/  # tests often do weird things with types, exclude
      NUM_CPUS: 2  # more CPUs visible but we're throttled to 2, which breaks auto-detect

commands:
  # Define common function to install dependencies and seals, used in the jobs defined in the next section
  dependencies:
    # You must still manually update the Docker image if any
    # binary (non-Python) dependencies change.
    description: "Check out and update Python dependencies."
    steps:
      - checkout  # Check out the code from Git

      # Download and cache dependencies
      # Note the Docker image must still be manually updated if any binary (non-Python) dependencies change.

      # Restore cache if it exists. setup.py defines all the requirements, so we checksum that.
      # If you need to force an update, then increase the version number `vn-dependencies`.
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "setup.py" }}

      # Create virtual environment and nistall dependencies using `ci/build_venv.sh`.
      # `mujoco_py` needs a MuJoCo key, so download that first.
      # We do some sanity checks to ensure the key works.
      - run:
          name: install dependencies
          # MUJOCO_KEY is defined in the context `MuJoCo`.
          command: |
            curl -o /root/.mujoco/mjkey.txt ${MUJOCO_KEY}
            md5sum /root/.mujoco/mjkey.txt
            [[ -d /venv ]] || /seals/ci/build_venv.sh /venv
            python -c "import mujoco_py"

      # Save the cache of dependencies.
      - save_cache:
          paths:
            - /venv
          key: v1-dependencies-{{ checksum "setup.py" }}

      # Install seals.
      # Note we install the source distribution, not in developer mode (`pip install -e`).
      # This ensures we're testing the package our users would experience, and in particular
      # will catch e.g. modules or data files missing from `setup.py`.
      - run:
          name: install evaluating_rewards
          # Build a wheel then install to avoid copying whole directory (pip issue #2195)
          command: |
            python setup.py sdist bdist_wheel
            pip install --upgrade dist/seals-*.whl

# The `jobs` section defines jobs that can be executed on CircleCI as part of workflows.
jobs:
  # `lintandtype` installs dependencies + `seals`, lints the code, builds the docs, and runs type checks.
  lintandtype:
    executor: my-executor

    steps:
      - dependencies
      - run:
          name: flake8
          command: flake8 ${SRC_FILES}

      - run:
          name: black
          command: black --check ${SRC_FILES}

      - run:
          name: codespell
          command: codespell -I .codespell.skip --skip='*.pyc' ${SRC_FILES}

      - run:
          name: sphinx
          command: pushd docs/ && make clean && make html && popd

      - run:
          name: pytype
          command: pytype ${TYPECHECK_FILES}

      - run:
          name: mypy
          command: mypy ${TYPECHECK_FILES}

  # `unit-test` runs the unit tests in `tests/`.
  unit-test:
    executor: my-executor
    parallelism: 3
    steps:
      - dependencies

      # Running out of memory is a common cause of spurious test failures.
      # In particular, the CI machines have less memory than most workstations.
      # So tests can pass locally but fail on CI. Record memory and other resource
      # usage over time to aid with diagnosing these failures.
      - run:
          name: Memory Monitor
          command: |
            mkdir /tmp/resource-usage
            export FILE=/tmp/resource-usage/memory.txt
            while true; do
              ps -u root eo pid,%cpu,%mem,args,uname --sort=-%mem >> $FILE
              echo "----------" >> $FILE
              sleep 1
            done
          background: true

      # Run the unit tests themselves
      - run:
          name: run tests
          command: |
            export DISPLAY=:0  # we need an X11 display for tests of environment rendering
            # --cov specifies which directories to report code coverage for
            # Since we test the installed `seals`, our source files live in `venv`, not in `src/seals`.
            # --junitxml records test results in JUnit format. CircleCI can parse this to pretty-print results.
            # --shard-id and --num-shards are used to split tests across parallel executors using `pytest-shard`.
            # -n uses `pytest-xdist` to parallelize tests within a single instance.
            pytest --cov=/venv/lib/python3.7/site-packages/seals --cov=tests \
                   --junitxml=/tmp/test-reports/junit.xml \
                   --shard-id=${CIRCLE_NODE_INDEX} --num-shards=${CIRCLE_NODE_TOTAL} \
                    -n ${NUM_CPUS} -vv tests/
            # Following two lines rewrite paths from venv/ to src/, based on `coverage:paths` in `setup.cfg`
            # This is needed to avoid confusing Codecov
            mv .coverage .coverage.bench
            coverage combine
      - codecov/upload

      # Upload the test results and resource usage to CircleCI
      - store_artifacts:
          path: /tmp/test-reports
          destination: test-reports
      - store_artifacts:
          path: /tmp/resource-usage
          destination: resource-usage
      # store_test_results uploads the files and tells CircleCI that it should parse them as test results
      - store_test_results:
          path: /tmp/test-reports
          unit-test:

# Workflows define the jobs to actually run on CircleCI.
# Here we have just a single workflow, `test`.
# We attach two contexts to both jobs:
# - `MuJoCo` which contains the URL for our MuJoCo license key.
# - `docker-hub-creds` which contain the credentials for our Dockerhub machine user.
# The environment variables these define MUST be kept secret.
# So don't echo the environment variables anywhere in the config!
workflows:
  version: 2
  test:
    jobs:
      - lintandtype:
          context:
          - MuJoCo
          - docker-hub-creds
      - unit-test:
          context:
          - MuJoCo
          - docker-hub-creds
